# G-Code macros (one may define any number of sections with a
# "gcode_macro" prefix).
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(195)|float %}
    M117 Warming up
    M140 S{BED_TEMP}
    M104 S{EXTRUDER_TEMP}
    G90 ; switch to absolute positioning - this line was added in case Cura doesn't include it by default
    M82 ; set extruder to absolute mode - this line was added in case Cura doesn't include it by default
    G28 ; start from home position
    M106 S255 ; Set fan to avoid head creep

    BED_MESH_CALIBRATE
    G0 X0 Y0 Z15.0 F3600

    M190 S{BED_TEMP}        # Wait for bed to reach temperature
    M109 S{EXTRUDER_TEMP}   # Set and wait for nozzle to reach temperature

    M117 Purgin
    G4 S4
    ; extrude a strip outside of the perimeter
    G92 E0
    G1 X-54 Y0 Z0.32 F2700
    G3 X0 Y-54 I54 E20 F900
    G92 E0
    M117 Printing


[gcode_macro timer]
gcode:
    M117 1
    G4 P60000 ; 
    M117 2




[gcode_macro END_PRINT]
gcode:
    M104 S0 ; turn off hotend heater
    M140 S0 ; turn off bed heater
    G91 ; Switch to use Relative Coordinates
    G1 E-3 F700 ; retract the filament a bit before lifting the nozzle to release some of the pressure
    G1 Z15 F1000 ; raise platform 2mm from current position
    G1 E-10 F700 ; retract filament even more
    G90 ; Switch back to using absolute coordinates
    G28 ; Return to home position. Without an X Y or Z after G28 the prin on the Mini Delta's display.
    M84 ; disable motors
    G4 P120000 ; 
    M107 ; turn off fan. Don't use M106 S1. Using M106 S1 may prevent the fan from turning on for the following print. Some say M107 doesn't work for them but if the hotend is below 70 degrees it should work
    M117 Ready


[gcode_macro SENSORLESS_HOME_A]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_a'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_a CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_a CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro SENSORLESS_HOME_b]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_b'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_b CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_b CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro SENSORLESS_HOME_c]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_c'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_c CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_c CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 



[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro PIDBED]
description: PID BED 45C
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=45
    #TURN_OFF_HEATERS


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
